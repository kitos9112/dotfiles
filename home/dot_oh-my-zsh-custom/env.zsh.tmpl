# Lang-related settings
export LANG=en_GB.UTF-8
export LC_ALL=en_GB.UTF-8

export ZSH_CUSTOM=$ZSH_CUSTOM
export EDITOR="/usr/bin/vim"
export TERM="xterm-256color"
export GPG_TTY=$TTY # Fix gpg: signing failed: Inappropiate ioctl for device

export MANPATH="/usr/local/man:$MANPATH"

# user-specific configuration files should be stored. If $XDG_CONFIG_HOME is either not set or empty, a default equal to $HOME/.config
export XDG_CONFIG_HOME="${HOME}/.config"
# user-specific data files should be stored. If $XDG_DATA_HOME is either not set or empty, a default equal to $HOME/.local/share
export XDG_DATA_HOME="${HOME}/.data"
# user-specific state files should be stored. If $XDG_STATE_HOME is either not set or empty, a default equal to $HOME/.local/state
export XDG_STATE_HOME="${HOME}/.state"

## Go-related envs
# Check if the `$HOME/go` folder exist if so, configure GOPATH and PATH
if [ -d "$HOME/.go" ]; then
  export GOROOT="$HOME/.go"
elif [ -d "$HOME/go" ]; then
  export GOROOT="$HOME/go"
elif [ -d "$HOME/Go" ]; then
  export GOROOT="$HOME/Go"
fi

export GOBIN="$HOME/bin"
export PATH="$PATH:$GOROOT/bin"

## cargoup - RUST
export PATH=$HOME/.cargo/bin:$PATH

# Other alterations to PATH

{{- if (eq .chezmoi.os "linux") }}

# WSL
if $(uname -a | grep -qPe "(M|m)icrosoft"); then
  # Hitting a WSL system :)
  export DISPLAY="$(/sbin/ip route | awk '/default/ { print $3 }'):0"
  export PATH=$PATH:/mnt/c/Windows/System32:/mnt/c/users/${USER}/bin
  DockerResourcesBin="/mnt/c/Program Files/Docker/Docker/resources/bin"
  export PATH=${PATH}:${DockerResourcesBin}
fi

# Linux
if $(uname -a | grep -qPe "(L|l)inux"); then
  # ASDF
  export PATH=${HOME}/.asdf/shims:${HOME}/.asdf/bin:${PATH}
{{ if .is_root }}
  # Linuxbrew
  export PATH=/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:${PATH}
{{ end }}
# Krew kubectl plugin manager
  export PATH=${KREW_ROOT:-$HOME/.krew}/bin:${PATH}
# Home binaries
  export PATH=${PATH}:${HOME}/.local/bin:${HOME}/bin
fi

{{ end }}
{{- if (eq .chezmoi.os "darwin") -}}

# Hitting a MacOS system :)
export PATH=${HOME}/.asdf/shims:${HOME}/.local/bin:${HOME}/bin:/opt/homebrew/bin:/opt/homebrew/sbin:${KREW_ROOT:-$HOME/.krew}/bin:${PATH}

{{ end }}
# Kubectl autocomplete
if [ $commands[kubectl] ]; then source <(kubectl completion zsh); fi

# direnv
eval "$(direnv hook zsh)"

# ssh-agent

# Sample script that will always reuse the same ssh-agent, or start ssh-agent if it is not running in the background
# set SSH_AUTH_SOCK env var to a fixed value
export SSH_AUTH_SOCK=~/.ssh/ssh-agent.sock

# test whether $SSH_AUTH_SOCK is valid
ssh-add -l 2>/dev/null >/dev/null

# if not valid, then start ssh-agent using $SSH_AUTH_SOCK. Ignore errors that may happen in WSL2
[ $? -ge 2 ] && ssh-agent -a "$SSH_AUTH_SOCK" 2>/dev/null

# ASDF - Add a command-line fuzzy finder tool https://github.com/junegunn/fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
